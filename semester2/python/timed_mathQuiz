import random

import time

import matplotlib.pyplot as plt

Function to generate a math question based on the given level

def generate question(level):

# Define the range for numbers based on the level

if level <=

numl = random. randint (1, 10)

num2 = random. randint (1, 10)

elif level <= 4:

numl = random. randint (10, 50)

num2 = random. randint (10, 50)

else:

num1 = random. randint (50, 100) num2 = random. randint (50, 100)

Choose a random operator

operator = random.choice (['+', '-', '*', '/'])

Ensure that division questions have integer solutions
if operator == '/':

num1 = num1 * num2

Construct the question string

question = f"What is {num1} {operator} {num2}?

urn question, eval (str (num1) + operator + str (num2))

# Main function to run the math quiz def main():

print ("Welcome to the Math Quiz!")

total score

scores = [] # List to store scores for each level

Loop through 5 levels

for level in range (1, 6):

print(f"\nLevel {level}:")

print ("Answer the following questions:")

# List to store questions and answers to avoid repetition within a

level

questions answers = [] level score =

Start the time

start time = time.time()

Generate 5 unique questions for each level

for in range (5):

# Generate a unique question

question, answer = generate question (level) while question in questions answers:

question, answer = generate question(level)

print (question)

user answer = input ("Your answer: ")

try:

user_answer = float (user_answer)

if user answer == answer:

level score += 1
except ValueError:

print ("Invalid input! Please enter a number.")

Add question to the list to avoid repetition questions_answers.append (question)

End the timer

end_time = time.time ()

Calculate the time taken for the level

level time = end time - start time

Display the score and time taken for the level

print(f"Score for Level {level}: {level score}/5")

print (f"Time taken for Level {level}: {level time:.2f} seconds")

Add the level score to the total score

total_score += level_score

scores.append(level score)

# Display feedback message after completing each level

print (random.choice (["Bravo!!", "Smart!!", "Great!!", "Well done!!", "Fantastic!!"]))

# Display final message if the game is completed without errors print ("\nCongratulations on completing the game! Well done!")

Plotting bar graph

plt.figure(figsize=(7, 5))

plt.bar (range (1, 6), scores, color='skyblue')

plt.title ('Scores for Each Level')

plt.xlabel('Level')

plt.ylabel('Score')

plt.xticks (range (1, 6))

plt.grid(True)

plt.show()

# Plotting pie chart plt.figure (figsize=(7, 7))
plt.pie (scores, labels=[f'Level {i}' for i in range(1, 6)],

autopct='%1.1f%%', startangle=140)

plt.title('Scores Distribution')

plt.axis('equal')

plt.show()

if name == " main ":

main()
